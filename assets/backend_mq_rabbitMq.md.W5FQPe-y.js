import{_ as a,o as t,c as o,R as e}from"./chunks/framework.3IDgao2s.js";const d=JSON.parse('{"title":"1. 消息队列","description":"","frontmatter":{},"headers":[],"relativePath":"backend/mq/rabbitMq.md","filePath":"backend/mq/rabbitMq.md"}'),r={name:"backend/mq/rabbitMq.md"},n=e('<h1 id="_1-消息队列" tabindex="-1">1. 消息队列 <a class="header-anchor" href="#_1-消息队列" aria-label="Permalink to &quot;1. 消息队列&quot;">​</a></h1><blockquote><p>笔记来源<a href="https://www.bilibili.com/video/BV1K44y177Eb" target="_blank" rel="noreferrer">尚硅谷RabbitMq和RocketMq合集</a></p></blockquote><h2 id="_1-mq的概念" tabindex="-1">1. Mq的概念 <a class="header-anchor" href="#_1-mq的概念" aria-label="Permalink to &quot;1. Mq的概念&quot;">​</a></h2><h3 id="_1-什么是mq" tabindex="-1">1. 什么是Mq <a class="header-anchor" href="#_1-什么是mq" aria-label="Permalink to &quot;1. 什么是Mq&quot;">​</a></h3><blockquote><p>MQ(message queue)，从字面意思上看，本质是个队列，FIFO 先入先出，只不过队列中存放的内容是message 而已，还是一种跨进程的通信机制，用于上下游传递消息。在互联网架构中，MQ 是一种非常常见的上下游“逻辑解耦+物理解耦”的消息通信服务。使用了 MQ 之后，消息发送上游只需要依赖 MQ，不用依赖其他服务。</p></blockquote><h3 id="_2-为什么要用mq" tabindex="-1">2. 为什么要用Mq <a class="header-anchor" href="#_2-为什么要用mq" aria-label="Permalink to &quot;2. 为什么要用Mq&quot;">​</a></h3><ol><li>流量削峰</li></ol><blockquote><p>下游系统来不及处理上游系统请求的时候，可以使用Mq来进行缓冲</p></blockquote><ol start="2"><li>解耦</li></ol><blockquote><p>减少系统间的调用问题，即时下游系统崩溃，上游系统的消息也可以存放在消息队列中</p></blockquote><ol start="3"><li>异步处理</li></ol><blockquote><p>有些服务间调用是异步的，例如 A 调用 B，B 需要花费很长时间执行，但是 A 需要知道 B 什么时候可以执行完，以前一般有两种方式，A 过一段时间去调用 B 的查询 api 查询。或者 A 提供一个 callback api，B 执行完之后调用 api 通知 A 服务。这两种方式都不是很优雅，使用消息总线，可以很方便解决这个问题，</p><p>A 调用 B 服务后，只需要监听 B 处理完成的消息，当 B 处理完成后，会发送一条消息给 MQ，MQ 会将此消息转发给 A 服务。这样 A 服务既不用循环调用 B 的查询 api，也不用提供 callback api。同样 B 服务也不用做这些操作。A 服务还能及时的得到异步处理成功的消息。</p></blockquote><h3 id="_3-mq的分类" tabindex="-1">3. Mq的分类 <a class="header-anchor" href="#_3-mq的分类" aria-label="Permalink to &quot;3. Mq的分类&quot;">​</a></h3><ol><li>ActiveMQ</li></ol><p>优点：单机吞吐量万级，时效性 ms 级，可用性高，基于主从架构实现高可用性，消息可靠性较低的概率丢失数据</p><p>缺点:官方社区现在对 ActiveMQ 5.x <strong>维护越来越少，高吞吐量场景较少使用</strong>。</p><ol start="2"><li>KafKa</li></ol><p>优点: 性能卓越，单机写入 TPS 约在百万条/秒，最大的优点，就是吞<strong>吐量高</strong>。时效性 ms 级可用性非常高，kafka 是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用,消费者采用 Pull 方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;有优秀的第三方</p><p>Kafka Web 管理界面 Kafka-Manager；在日志领域比较成熟，被多家公司和多个开源项目使用；功能支持：功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及<strong>日志采集</strong>被大规模使用</p><p>缺点：Kafka 单机超过 64 个队列/分区，Load 会发生明显的飙高现象，队列越多，load 越高，发送消息响应时间变长，使用短轮询方式，实时性取决于轮询间隔时间，消费失败不支持重试；支持消息顺序，但是一台代理宕机后，就会产生消息乱序，<strong>社区更新较慢</strong>；</p><ol start="3"><li>RocketMq</li></ol><p>RocketMQ 出自阿里巴巴的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一些改进。被阿里巴巴广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog 分发等场景。</p><p>优点:<strong>单机吞吐量十万级</strong>,可用性非常高，分布式架构,<strong>消息可以做到 0 丢失</strong>,MQ 功能较为完善，还是分布式的，扩展性好,<strong>支持</strong> <strong>10</strong> <strong>亿级别的消息堆积</strong>，不会因为堆积导致性能下降,源码是 java 我们可以自己阅读源码，定制自己公司的 MQ</p><p>缺点：<strong>支持的客户端语言不多</strong>，目前是 java 及 c++，其中 c++不成熟；社区活跃度一般,没有在 MQ核心中去实现 JMS 等接口,有些系统要迁移需要修改大量代码</p><ol start="4"><li>RabbitMq</li></ol><p>2007 年发布，是一个在 AMQP(高级消息队列协议)基础上完成的，可复用的企业消息系统，是<strong>当前最主流的消息中间件之一</strong>。</p><p>优点:由于 erlang 语言的<strong>高并发特性</strong>，性能较好；<strong>吞吐量到万级</strong>，MQ 功能比较完备,健壮、稳定、易用、跨平台、<strong>支持多种语言</strong> 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持 AJAX 文档齐全；开源提供的管理界面非常棒，用起来很好用,<strong>社区活跃度高</strong>；更新频率相当高</p><p>缺点：商业版需要收费,学习成本较高</p><h3 id="_4-mq选择" tabindex="-1">4. Mq选择 <a class="header-anchor" href="#_4-mq选择" aria-label="Permalink to &quot;4. Mq选择&quot;">​</a></h3><ol><li>Kafka</li></ol><p>Kafka 主要特点是基于 Pull 的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，适合产生<strong>大量数据</strong>的互联网服务的数据收集业务。<strong>大型公司</strong>建议可以选用，如果有<strong>日志采集</strong>功能，首选 kafka 。</p><ol start="2"><li>RocketMQ</li></ol><p>天生为<strong>金融互联网</strong>领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况。RoketMQ 在稳定性上可能更值得信赖，这些业务场景在阿里双 11 已经经历了多次考验，如果你的业务有上述并发场景，建议可以选择 RocketMQ。</p><ol start="3"><li>RabbitMQ</li></ol><p>结合 erlang 语言本身的并发优势，性能好<strong>时效性微秒级</strong>，<strong>社区活跃度也比较高</strong>，管理界面用起来十分方便，如果<strong>数据量没有那么大</strong>，中小型公司优先选择功能比较完备的 RabbitMQ。</p><h2 id="_2-rabbitmq" tabindex="-1">2. RabbitMq <a class="header-anchor" href="#_2-rabbitmq" aria-label="Permalink to &quot;2. RabbitMq&quot;">​</a></h2><h3 id="_1-概念" tabindex="-1">1. 概念 <a class="header-anchor" href="#_1-概念" aria-label="Permalink to &quot;1. 概念&quot;">​</a></h3><blockquote><p>RabbitMQ 是一个消息中间件：它接受并转发消息。你可以把它当做一个快递站点，当你要发送一个包裹时，你把你的包裹放到快递站，快递员最终会把你的快递送到收件人那里，按照这种逻辑 RabbitMQ 是一个快递站，一个快递员帮你传递快件。RabbitMQ 与快递站的主要区别在于，它不处理快件而是接收，存储和转发消息数据</p></blockquote><h3 id="_2-四大核心概念" tabindex="-1">2. 四大核心概念 <a class="header-anchor" href="#_2-四大核心概念" aria-label="Permalink to &quot;2. 四大核心概念&quot;">​</a></h3><ol><li>生产者(Provider)</li></ol><p>产生数据发送消息的程序就是生产者</p><ol start="2"><li>交换机</li></ol><p>交换机是 RabbitMQ 非常重要的一个部件，一方面它接收来自生产者的消息，另一方面它将消息推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推送到多个队列，亦或者是把消息丢弃，这个得有交换机类型决定</p><ol start="3"><li>队列</li></ol><p>队列是 RabbitMQ 内部使用的一种数据结构，尽管消息流经 RabbitMQ 和应用程序，但它们只能存储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区。许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。这就是我们使用队列的方式</p><ol start="4"><li>消费者(consumer)</li></ol><p>消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序。请注意生产者，消费者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又是可以是消费者。</p><h3 id="_3-名词介绍" tabindex="-1">3. 名词介绍 <a class="header-anchor" href="#_3-名词介绍" aria-label="Permalink to &quot;3. 名词介绍&quot;">​</a></h3><p><strong>Broker</strong>：接收和分发消息的应用，RabbitMQ Server 就是 Message Broker</p><p><strong>Virtual host</strong>：出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出多个 vhost，每个用户在自己的 vhost 创建 exchange／queue 等</p><p><strong>Connection</strong>：publisher／consumer 和 broker 之间的 TCP 连接</p><p><strong>Channel</strong>：如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection 的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个 thread 创建单独的 channel 进行通讯，AMQP method 包含了 channel id 帮助客户端和 message broker 识别 channel，所以 channel 之间是完全隔离的。<strong>Channel 作为轻量级的Connection极大减少了操作系统建立TCP connection 的开销</strong></p><p><strong>Exchange</strong>：message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到 queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (multicast)</p><p><strong>Queue</strong>：消息最终被送到这里等待 consumer 取走</p><p><strong>Binding</strong>：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key，Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据</p><h3 id="_4-安装" tabindex="-1">4. 安装 <a class="header-anchor" href="#_4-安装" aria-label="Permalink to &quot;4. 安装&quot;">​</a></h3><ol><li><p>官网地址 <a href="https://www.rabbitmq.com/download.html" target="_blank" rel="noreferrer">https://www.rabbitmq.com/download.html</a></p></li><li><p>上传文件到服务器</p></li></ol><p>看到了第十集</p>',58),l=[n];function i(s,b,c,p,h,g){return t(),o("div",null,l)}const u=a(r,[["render",i]]);export{d as __pageData,u as default};
