import{_ as e,D as t,o as h,c as k,k as s,a as i,I as n,w as l,R as p}from"./chunks/framework.3IDgao2s.js";const ii=JSON.parse('{"title":"1. 入门概述","description":"","frontmatter":{},"headers":[],"relativePath":"backend/mq/activemq_antguigu.md","filePath":"backend/mq/activemq_antguigu.md"}'),r={name:"backend/mq/activemq_antguigu.md"},E=p("",6),d=p("",28),c={start:"2"},g=p("",1),o={start:"3"},y=p("",7),b=p("",8),u={start:"2"},m=p("",24),F=p("",27),A=s("p",null,"消息的过期时间,",-1),D=s("p",null,[i("等同于在"),s("code",null,"Destination中的send"),i("方法中的"),s("code",null,"timeToLive"),i("值上机上发送时刻的GMT时间值")],-1),C=s("p",null,"如果timeToLive值等于零，则JMSExpiration被设为零，表示该消息永不过期。",-1),v=s("p",null,"如果发送后，在消息过期时间之后消息还没有被发送到目的地，则该消息被清除",-1),B=s("h3",{id:"_4-jmspriority",tabindex:"-1"},[i("4. JMSPriority "),s("a",{class:"header-anchor",href:"#_4-jmspriority","aria-label":'Permalink to "4. JMSPriority"'},"​")],-1),q=s("p",null,"消息优先级",-1),_=s("p",null,"从0-9是各级别 0-4普通消息 5-9加急消息，默认为4",-1),M={id:"_5-jmsmessageid重要",tabindex:"-1"},f=s("a",{class:"header-anchor",href:"#_5-jmsmessageid重要","aria-label":'Permalink to "5. JMSMessageID:warning:**<font color=red>重要</font>**"'},"​",-1),T=s("blockquote",null,[s("p",null,"唯一识别每个消息的标识，由MQ产生")],-1),S=s("h2",{id:"_2-消息体",tabindex:"-1"},[i("2. 消息体 "),s("a",{class:"header-anchor",href:"#_2-消息体","aria-label":'Permalink to "2. 消息体"'},"​")],-1),x={id:"_1-textmessage",tabindex:"-1"},j=s("a",{class:"header-anchor",href:"#_1-textmessage","aria-label":'Permalink to "1. <font color=red>TextMessage:warning:</font>"'},"​",-1),w=s("blockquote",null,[s("p",null,"普通字符串消息，包含一个String")],-1),P={id:"_2-mapmessage",tabindex:"-1"},I=s("a",{class:"header-anchor",href:"#_2-mapmessage","aria-label":'Permalink to "2. <font color=red>MapMessage:warning:</font>"'},"​",-1),Q=p("",14),N=p("",1),L=p("",2),J=s("p",null,"可靠性的另一个重要方面是确保持久性消息传送至目标后，消息服务在向消费者传送它们之前不会丢失这些消息。",-1),O=s("h3",{id:"_2-topic",tabindex:"-1"},[i("2. Topic "),s("a",{class:"header-anchor",href:"#_2-topic","aria-label":'Permalink to "2. Topic"'},"​")],-1),R=p("",6),V=s("code",null,"session.commit()",-1),U=p("",11),z=p("",61),W=p("",3),K=p("",21),G=s("h2",{id:"_2-kahadb",tabindex:"-1"},[i("2. KahaDB "),s("a",{class:"header-anchor",href:"#_2-kahadb","aria-label":'Permalink to "2. KahaDB"'},"​")],-1),Z=p("",16),$=p("",5),H=s("h3",{id:"_3-小总结",tabindex:"-1"},[i("3. 小总结 "),s("a",{class:"header-anchor",href:"#_3-小总结","aria-label":'Permalink to "3. 小总结"'},"​")],-1),Y=s("code",null,"activemq_msgs",-1),X=s("code",null,"activemq_acks",-1),ss=s("h2",{id:"_4-jdbc-journal",tabindex:"-1"},[i("4. JDBC & Journal "),s("a",{class:"header-anchor",href:"#_4-jdbc-journal","aria-label":'Permalink to "4.  JDBC & Journal"'},"​")],-1),is=s("p",null,[i("JDBC 频繁的读取数据库可能会导致性能变慢，使用"),s("code",null,"Apache journal"),i("可以克服JDBC的不足。当消费者的消费速度能够及时跟上生产者消息的生产速度时，"),s("code",null,"journal"),i("文件能够大大减少需要写入到DB中的消息。")],-1),as=s("p",null,"生产者生产了1000条消息，这1000条消息会保存到journal文件，如果消费者的消费速度很快的情况下，在journal文件还没有同步到DB之前，消费者已经消费了90%的以上的消息，那么这个时候只需要同步剩余的10%的消息到DB。",-1),ns=s("p",null,"如果消费者的消费速度很慢，这个时候journal文件可以使消息以批量方式写到DB。",-1),ls=p("",2),ps=s("p",null,"jdbc效率低，kahaDB效率高，jdbc+Journal效率较高。",-1),es=p("",5),ts=p("",1),hs=p("",2),ks=s("p",null,"修改hosts映射防止单机模拟集群时都是用localhost出现错误",-1),rs=p("",1),Es=p("",6),ds=p("",3),cs=p("",4),gs=s("p",null,"ActiveMQ支持同步、异步两种发送的模式将消息发送到broker，模式的选择对发送延时有巨大的影响。producer能达到怎样的产出率(产出率=发送数据总量/时间)主要受发送延时的影响，使用异步发送可以显著的提高发送的性能。",-1),os=s("h2",{id:"_1-异步投送",tabindex:"-1"},[i("1. 异步投送 "),s("a",{class:"header-anchor",href:"#_1-异步投送","aria-label":'Permalink to "1. 异步投送"'},"​")],-1),ys=s("p",null,[i("此外它不能有效的确保消息的发送成功。在"),s("code",null,"useAsyncSend=true"),i("的情况下客户端需要容忍消息丢失的可能。")],-1),bs=p("",7),us=s("thead",null,[s("tr",null,[s("th",null,"参数"),s("th",null,"参数说明"),s("th",null,"示例")])],-1),ms=s("tr",null,[s("td",null,"cron"),s("td",null,"任务执行的cron表达式"),s("td",null,"0/1 * * * * ?")],-1),Fs=s("tr",null,[s("td",null,"zone"),s("td",null,"cron表达时解析使用的时区,默认为服务器的本地时区,使用java.util.TimeZone#getTimeZone(String)方法解析"),s("td",null,"GMT-8:00")],-1),As=s("td",null,"fixedDelay",-1),Ds=s("td",null,"1000",-1),Cs=s("tr",null,[s("td",null,"fixedDelayString"),s("td",null,"上一次任务执行结束到下一次执行开始的间隔时间,使用java.time.Duration#parse解析"),s("td",null,"PT15M")],-1),vs=s("td",null,"fixedRate",-1),Bs=s("td",null,"2000",-1),qs=s("tr",null,[s("td",null,"fixedRateString"),s("td",null,"与fixedRate逻辑一致,只是使用java.time.Duration#parse解析"),s("td",null,"PT15M")],-1),_s=s("tr",null,[s("td",null,"initialDelay"),s("td",null,"首次任务执行的延迟时间"),s("td",null,"1000")],-1),Ms=s("tr",null,[s("td",null,"initialDelayString"),s("td",null,"首次任务执行的延迟时间,使用java.time.Duration#parse解析"),s("td",null,"PT15M")],-1),fs=s("h2",{id:"_3-重试机制",tabindex:"-1"},[i("3. 重试机制 "),s("a",{class:"header-anchor",href:"#_3-重试机制","aria-label":'Permalink to "3. 重试机制"'},"​")],-1),Ts=s("p",null,[s("a",{href:"http://activemq.apache.org/redelivery-policy",target:"_blank",rel:"noreferrer"},"官方文档")],-1),Ss=s("p",null,"一个消息被redelivedred超过默认的最大重发次数（默认6次）时，消费的回个MQ发一个“poison ack”表示这个消息有毒，告诉broker不要再发了。这个时候broker会把这个消息放到DLQ（死信队列）。",-1),xs=s("h3",{id:"_1-引发消息重发的情况",tabindex:"-1"},[i("1. 引发消息重发的情况 "),s("a",{class:"header-anchor",href:"#_1-引发消息重发的情况","aria-label":'Permalink to "1. 引发消息重发的情况"'},"​")],-1),js=s("ol",null,[s("li",null,"Client用了transactions且再session中调用了rollback"),s("li",null,"Client用了transactions且再调用commit之前关闭或者没有commit"),s("li",null,"Client再CLIENT_ACKNOWLEDGE的传递模式下，session中调用了recover")],-1),ws=s("h3",{id:"_2-参数介绍",tabindex:"-1"},[i("2. 参数介绍 "),s("a",{class:"header-anchor",href:"#_2-参数介绍","aria-label":'Permalink to "2. 参数介绍"'},"​")],-1),Ps=s("thead",null,[s("tr",null,[s("th",null,"参数"),s("th",null,"描述"),s("th",null,"默认值")])],-1),Is=s("tr",null,[s("td",null,"collisionAvoidanceFactor"),s("td",null,"设置防止冲突范围的正负百分比，只有启用useCollisionAvoidance参数时才生效。也就是在延迟时间上再加一个时间波动范围"),s("td",null,"0.15")],-1),Qs=s("br",null,null,-1),Ns=s("tr",null,[s("td",null,"maximumRedeliveryDelay"),s("td",null,[i("最大传送延迟，只在useExponentialBackOff为true时有效(V5.5)，假设首"),s("br"),i("次重连间隔为10ms，倍数为2，那么第二次重连时间间隔为20ms，第三次重连时间间隔为40ms，当重连时间间隔大的最大重连时间间隔时，以后每次重连时间间隔都为最大重连时间间隔")]),s("td",null,"-1")],-1),Ls=s("tr",null,[s("td",null,"redeliveryDelay"),s("td",null,"重发延迟时间，当initialRedeliveryDelay=0时生效"),s("td",null,"1000L")],-1),Js=s("tr",null,[s("td",null,"useCollisionAvoidance"),s("td",null,"启用防止冲突功能"),s("td",null,"false")],-1),Os=s("tr",null,[s("td",null,"useExponentialBackOff"),s("td",null,"启用指数倍数递增的方式增加延迟时间"),s("td",null,"false")],-1),Rs=s("tr",null,[s("td",null,"backOffMultiplier"),s("td",null,"重连时间间隔递增倍数，只有值大于1和启用useExponentialBackOff参数时才生效"),s("td")],-1),Vs=p("",20),Us=s("a",{href:"https://blog.csdn.net/l1028386804/article/details/69041255",target:"_blank",rel:"noreferrer"},"ActiveMq使用Mysql持久化报错",-1),zs=p("",2),Ws=p("",2);function Ks(Gs,Zs,$s,Hs,Ys,Xs){const a=t("font");return h(),k("div",null,[E,s("blockquote",null,[s("p",null,[i("消息生产者将消息发送到消息服务器，消息服务器将消息存放在MQ中，在合适的时候消息服务器会把消息转发给消费者，在这个过程中，"),n(a,{color:"red"},{default:l(()=>[i("发送和消费都是异步的")]),_:1}),i("，也就是生产者无需等待，而且消费者和生产者之间的生命周期没有必然的 关系，尤其是在 pub / sub 模式下，也可以完成一对多的通信。")])]),d,s("ol",c,[s("li",null,[i("创建连接对象 "),s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("并调用 start 方法")]),_:1})])])]),g,s("ol",o,[s("li",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("创建session，最重要的就是session")]),_:1})])])]),y,s("blockquote",null,[s("p",null,[i("消息类型一共有五种，分别是**"),n(a,{color:"red"},{default:l(()=>[i("TextMessage[文本消息]、MapMessage[Map消息，键值对类型]、ObjectMessage")]),_:1}),i("**")]),s("p",null,[i("剩下的两种不是很常用 "),n(a,{color:"blue"},{default:l(()=>[i("BytesMessage、StreamMessage")]),_:1})])]),b,s("ol",u,[s("li",null,[i("创建Connection**"),n(a,{color:"red"},{default:l(()=>[i("并调用start方法")]),_:1}),i("**")])]),m,s("p",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("发布此类消息的时候必须要有一个消费者在线，否则是网页端是显示不了订阅消息的")]),_:1})])]),F,s("blockquote",null,[A,s("p",null,[i("可以设置消息在一定时间后过期，"),n(a,{color:"red"},{default:l(()=>[i("默认永不过期")]),_:1})]),D,C,v]),B,s("blockquote",null,[q,_,n(a,{color:"red"},{default:l(()=>[i("JMS不要求MQ严格按照这是个优先级发送消息但是必须保证加急消息比普通消息先到达")]),_:1})]),s("h3",M,[i("5. JMSMessageID⚠️"),s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("重要")]),_:1})]),i(),f]),T,S,s("blockquote",null,[s("p",null,[i("负责封装具体的消息数据，"),n(a,{color:"red"},{default:l(()=>[i("发送和接受的消息体类型必须一致对应")]),_:1})])]),s("h3",x,[i("1. "),n(a,{color:"red"},{default:l(()=>[i("TextMessage⚠️")]),_:1}),i(),j]),w,s("h3",P,[i("2. "),n(a,{color:"red"},{default:l(()=>[i("MapMessage⚠️")]),_:1}),i(),I]),Q,s("blockquote",null,[s("ul",null,[N,s("li",null,[L,n(a,{color:"red"},{default:l(()=>[i("这是队列的默认传递模式")]),_:1}),i("，可以保证这些消息只被传递一次，对于这些消息，可靠性是优先考虑的因素"),J])])]),O,s("blockquote",null,[n(a,{color:"red"},{default:l(()=>[i("应该先启动订阅者在启动生产者")]),_:1})]),R,s("p",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("Queue模式下如果开启了事务，但是没有执行"),V,i(",会导致消费者获取到了消息，但是消费掉消息(重复消费)。切忌切忌！！！")]),_:1})])]),U,s("p",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("当消息必须被接收就用持久订阅，允许丢失消息就用非持久订阅")]),_:1})])]),z,s("ol",null,[s("li",null,[n(a,{color:"red"},{default:l(()=>[i("这个是默认的Broker配置，TCP的client监听端口是61616")]),_:1})]),s("li",null,[s("p",null,[i("在网络传输数据时，必须要序列化数据，消息是通过一个叫wire protocol的来序列化成"),n(a,{color:"blue"},{default:l(()=>[i("字节流")]),_:1}),i("。默认情况下ActiveMQ把wire protocol叫做OpenWire,它的目的是促使网络上的效率和数据快速交互。")])]),W]),K,s("blockquote",null,[s("p",null,[i("AMQ是一种文件存储形式，它具有写入速度快和容易恢复的特点。消息存储在一个个文件中，文件的默认大小为32M，当一个存储文件中的消息已经全部被消费，那么这个文件将被标识为可删除，在下一个清除阶段，这个文件被删除。"),n(a,{color:"red"},{default:l(()=>[i("AMQ适用于ActiveMQ5.3之前的版本")]),_:1})])]),G,s("blockquote",null,[s("p",null,[i("基于日志文件，"),n(a,{color:"red"},{default:l(()=>[i("从 ActiveMQ5.4开始默认的持久化插件")]),_:1})])]),Z,s("blockquote",null,[s("p",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("一定要开始持久化")]),_:1})])]),$]),H,s("blockquote",null,[s("ul",null,[s("li",null,[n(a,{color:"blue"},{default:l(()=>[i("Queue")]),_:1}),i("：在没有消费者消费的情况下会将消息保存到"),Y,i("表中，只要有任意一个消费者已经消费过了，消费之后这些消息将会立即被删除。")]),s("li",null,[n(a,{color:"blue"},{default:l(()=>[i("Topic")]),_:1}),i("：一般是先启动消费订阅然后再生产的情况下会将消息保存到"),X,i("。")])])]),ss,s("blockquote",null,[is,s("p",null,[s("strong",null,[n(a,{color:"blue"},{default:l(()=>[i("举个栗子")]),_:1})])]),as,ns]),ls,s("blockquote",null,[n(a,{color:"blue"},{default:l(()=>[i("持久化消息指的是：")]),_:1}),i("MQ服务器当机了消息不会丢失"),ps,n(a,{color:"blue"},{default:l(()=>[i("持久化机制演变的过程:")]),_:1}),i("从最初的AMQ Message Store方案到ActiveMQ V4版本退出的High Performance Journal（高性能事务支持）附件，并且同步推出了关于关系型数据库的存储方案。ActiveMQ5.3版本又推出了对KahaDB的支持（5.4版本后被作为默认的持久化方案），后来ActiveMQ 5.8版本开始支持LevelDB，到现在5.9提供了标准的Zookeeper+LevelDB集群化方案。")]),es,s("p",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("首先需要保证有能够正常访问的Zookeeper集群")]),_:1})])]),ts,s("ol",null,[hs,s("li",null,[ks,n(a,{color:"red"},{default:l(()=>[i("实际上**整个127网段(127.0.0.1 ~ 127.255.255.254)**都是回环地址")]),_:1}),rs]),Es]),ds,s("p",null,[s("strong",null,[n(a,{color:"blue"},{default:l(()=>[i("代码中的Mq地址需要修改")]),_:1})])]),cs,s("blockquote",null,[gs,n(a,{color:"red"},{default:l(()=>[i("ActiveMQ默认使用异步发送的模式")]),_:1}),i("，除非明确指定使用同步发送的方式或者在未使用事务的前提下发送持久化的消息，这两种情况都是同步发送的。"),s("p",null,[i("如果"),n(a,{color:"blue"},{default:l(()=>[i("没有使用事务且发送的是持久化的消息")]),_:1}),i("，每一次发送都是同步发送的且会阻塞producer直到broker返回一个确认，表示消息已经被安全的持久化到磁盘。确认机制提供了消息安全的保障，但同时会阻塞客户端带来了很大的延时。")]),s("p",null,[i("很多高性能的应用，"),n(a,{color:"red"},{default:l(()=>[i("允许在失败的情况下有少量的数据丢失")]),_:1}),i("。如果你的应用满足这个特点，你可以使用异步发送来提高生产率，即使发送的是持久化的消息")])]),os,s("blockquote",null,[s("p",null,[i("它可以最大化produer端的发送效率。"),n(a,{color:"blue"},{default:l(()=>[i("我们通常在发送消息量比较密集的情况下使用异步发送")]),_:1}),i("，它可以很大的提升Producer性能;不过这也带来了额外的问题， 就是需要消耗较多的Client端内存同时也会导致broker端性能消耗增加;")]),ys]),bs,s("p",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("懒得写了，用springtask的@Scheduled注解吧，详细参数如下")]),_:1})])]),s("table",null,[us,s("tbody",null,[ms,Fs,s("tr",null,[As,s("td",null,[n(a,{color:"red"},{default:l(()=>[i("上一次任务执行结束到下一次执行开始的间隔时间,")]),_:1}),i("单位为ms")]),Ds]),Cs,s("tr",null,[vs,s("td",null,[n(a,{color:"red"},{default:l(()=>[i("以固定间隔执行任务，即上一次任务执行开始到下一次执行开始的间隔时间,")]),_:1}),i("单位为ms,若在调度任务执行时,上一次任务还未执行完毕,会加入worker队列,等待上一次执行完成后立即执行下一次任务")]),Bs]),qs,_s,Ms])]),fs,s("blockquote",null,[Ts,s("p",null,[i("默认的是 "),n(a,{color:"red"},{default:l(()=>[i("每秒钟重发六次")]),_:1})]),Ss]),xs,js,ws,s("table",null,[Ps,s("tbody",null,[Is,s("tr",null,[s("td",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("maximumRedeliveries")]),_:1})])]),s("td",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("最大重传次数，达到最大重连次数后抛出异常。"),Qs,i("为-1时不限制次数，为0时表示不进行重传")]),_:1})])]),s("td",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("6")]),_:1})])])]),Ns,s("tr",null,[s("td",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("initialRedeliveryDelay")]),_:1})])]),s("td",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("初始重发延迟时间(ms)")]),_:1})])]),s("td",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("1000L")]),_:1})])])]),Ls,Js,Os,Rs])]),Vs,s("p",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("参考自："),Us]),_:1})])]),zs,n(a,{color:"red"},{default:l(()=>[i("**错误原因activemq锁表了**")]),_:1}),s("p",null,[s("strong",null,[n(a,{color:"blue"},{default:l(()=>[i("解决办法")]),_:1})])]),Ws,s("blockquote",null,[s("p",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("感谢汪经理指出的错别字")]),_:1})]),i(" 🐕")])])])}const ai=e(r,[["render",Ks]]);export{ii as __pageData,ai as default};
