import{_ as t,D as p,o as r,c as h,k as s,I as n,w as l,a as i,R as e}from"./chunks/framework.3IDgao2s.js";const j=JSON.parse('{"title":"1. 概念","description":"","frontmatter":{},"headers":[],"relativePath":"server/docker.md","filePath":"server/docker.md"}'),k={name:"server/docker.md"},d=e("",45),c=s("p",null,[i("在执行"),s("code",null,"docker run"),i("命令时，通过指定 "),s("code",null,"-v 数据卷:容器内目录"),i("可以完成数据卷挂载。")],-1),o=s("p",null,"当创建容器时，如果挂载了数据卷且数据卷不存在，则会自动创建数据卷。",-1),g=e("",8),b=s("p",null,[i("使用"),s("code",null,"docker inspect mysql"),i("可以看到mysql默认挂载了一个匿名数据卷，数据都存储在这个数据卷中。")],-1),F=s("code",null,"-v 本地目录:容器内目录",-1),u=s("code",null,"/",-1),y=s("code",null,"./",-1),E=e("",2),m=e("",2),C=s("h1",{id:"_4-自定义镜像",tabindex:"-1"},[i("4. 自定义镜像 "),s("a",{class:"header-anchor",href:"#_4-自定义镜像","aria-label":'Permalink to "4. 自定义镜像"'},"​")],-1),v=s("p",null,"镜像就是包含了应用程序，运行环境，运行配置的文件包，构建镜像的过程就是把上述文件打包的过程。",-1),B=s("strong",null,"层(Layer)",-1),A=s("strong",null,"基础镜像(BaseImage)",-1),D=e("",45);function _(q,f,x,w,T,P){const a=p("font");return r(),h("div",null,[d,s("blockquote",null,[c,o,n(a,{color:"red"},{default:l(()=>[i("容器创建好之后就没有办法再挂载数据卷了。")]),_:1})]),g,s("blockquote",null,[b,s("p",null,[i("通过 "),F,i("来完成本地目录挂载。"),s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("本地目录必须以 "),u,i(" 或者"),y,i("开头，否则便会被识别成数据卷")]),_:1})])]),E]),m,s("p",null,[s("strong",null,[n(a,{color:"red"},{default:l(()=>[i("将数据挂载到本地目录之后，即便是当前的mysql意外挂掉或者被删除了，使用上边的命令创建好容器，数据依旧不会丢失。")]),_:1})])]),C,s("blockquote",null,[v,s("p",null,[i("镜像运行的时候有一个**"),n(a,{color:"red"},{default:l(()=>[i("入口(entrypoint)")]),_:1}),i("**,一般是程序的启动脚本和参数")]),s("p",null,[i("添加安装包，依赖，配置等，每一次操作都会形成新的一"),n(a,{color:"red"},{default:l(()=>[B]),_:1}),i(",")]),s("p",null,[i("分层的好处在于如果有"),n(a,{color:"red"},{default:l(()=>[A]),_:1}),i("存在，在拉取新的镜像的时候就不需要重复下载了。")])]),D])}const N=t(k,[["render",_]]);export{j as __pageData,N as default};
